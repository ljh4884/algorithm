1. (이전 나머지 * 10 + 선택한 숫자) % m 을 반복한다는 아이디어로 시작

2. check parameter를 통해 현재까지 생성된 가격이 기존 가격보다 크다면 stop
					    기존 가격과 같다면 check == 0
					    기존 가격보다 같다면 check == 1
   마지막에 check == 1 일경우 return 1

3. function(int pos, int div, int check,int *count) 

	매번 카운트를 해야해서 시간이 오래걸릴 뿐더러 메모이제이션을 적용할 방법을 못찾음

4. function(int bit, int div, int check) / factorial

	카운트 하는 대신 bitmask를 사용해서 현재 선택을 인자로 넘겨줌 

	(3)의 경우 최대 10^15 으로 메모리가 부족했지만 2^15으로 메모리를 절약

	수를 중복해서 세기 때문에 마지막에 각 숫자 count의 팩토리얼을 곱한것으로 나누어줌

	ex) 2 2 2 1 1 1 ------> func(0,0,0) / (3! * 3!)

	moduler 연산이 적용되어 있어서 결과가 다르게 나옴 (a%b)/c != (a/b)%c

5. sotring 후 function(int bit,int div, int check,int pos)

	sorting을 통해 정렬후 직전에 사용한 숫자와 같은 숫자이면 skip

	pos는 메모이제이션에 적용되진 않지만 편의성을 위해 만듬

		

		
	 